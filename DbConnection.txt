/*This file is part of "owsPro"(Rolf Joseph)

  A spinn-off for PHP Versions 5.5 to 8.3 from:
  OpenWebSoccer-Sim(Ingo Hofmann), https://github.com/ihofmann/open-websoccer.

  "owsPro" is is distributed in WITHOUT ANY WARRANTY;
  without even the implied warranty of MERCHANTABILITY
  or FITNESS FOR A PARTICULAR PURPOSE.

  See GNU Lesser General Public License Version 3 http://www.gnu.org/licenses/
=====================================================================================*/

/* DbConnection */

class_alias('DbConnection','DC'); // Alias the class 'DbConnection' as 'DC'
function connect(...$args){return DC::connect(...$args);} // Connect to the database using the 'DC' class
function close(...$args){return DC::close(...$args);} // Close the database connection using the 'DC' class
function querySelect(...$args){return DC::querySelect(...$args);} // Execute a select query using the 'DC' class
function queryCachedSelect(...$args){return DC::queryCachedSelect(...$args);} // Execute a cached select query using the 'DC' class
function queryUpdate(...$args){return DC::queryUpdate(...$args);} // Execute an update query using the 'DC' class
function queryDelete(...$args){return DC::queryDelete(...$args);} // Execute a delete query using the 'DC' class
function queryInsert(...$args){return DC::queryInsert(...$args);} // Execute an insert query using the 'DC' class
function LastInsertedId(...$args){return DC::getLastInsertedId(...$args);} // Get the last inserted ID using the 'DC' class
function buildQueryString(...$args){return DC::buildQueryString(...$args);} // Build a query string using the 'DC' class
function buildColumnsValueList(...$args){return DC::buildColumnsValueList(...$args);} // Build a list of columns and their corresponding values using the 'DC' class
function buildWherePart(...$args){return DC::buildWherePart(...$args);} // Build the WHERE part of a query using the 'DC' class
function prepareParameters(...$args){return DC::prepareParameters(...$args);} // Prepare query parameters using the 'DC' class
function Query(...$args){return DC::executeQuery(...$args);} // Execute a query using the 'DC' class

class DbConnection{ // This class represents a database connection.
    /**
	 * This static method implements the Singleton pattern, which ensures that only one instance of the DbConnection class is created.
	 * It checks if the $_instance variable is NULL and creates a new instance if it is.
	 * It then returns the instance.
 	 */
 	private static $_instance;
    static function getInstance(){
        if(DbConnection::$_instance==NULL)DbConnection::$_instance=new DbConnection();
        return DbConnection::$_instance;}
    
    /**
	 * This static method establishes a connection to the database using the mysqli extension. It sets the character set to UTF-8 and throws an exception if there is an error connecting to the database.
 	 */
    static function connect(){
        V::$conn=new mysqli(C('db_host'),C('db_user'),C('db_passwort'),C('db_name'));
        V::$conn->set_charset('utf8');
        if(mysqli_connect_error())throw new Exception('Database Connection Error ('.mysqli_connect_errno().') '.mysqli_connect_error());} // Throws an exception if there is an error connecting to the database
    
    /**
	 * This static method closes the database connection.
 	 */
    static function close(){
        V::$conn->close();}
    
    /**
	 * This static method executes a SELECT query and returns the result.
	 *
	 * It constructs the query string using the buildColumnsValueList function to build the SET part of the query and the buildWherePart function to build the WHERE part of the query.
	 * It then executes the query using the Query function and clears the query cache.
 	 */
    static function querySelect($columns, $fromTable, $whereCondition, $parameters = null, $limit = null){
        $queryStr = buildQueryString($columns, $fromTable, $whereCondition, $parameters, $limit);
        return Query($queryStr);}

    /**
	 * This static method executes a SELECT query and caches the result for future use.
	 *
	 * It first checks if the query result is already cached and returns it if found.
	 * If not, it executes the query using the buildQueryString function to construct the query string and the Query function to execute the query.
	 * It then fetches each row from the result and stores it in the query cache.
 	 */
    static function queryCachedSelect($columns,$fromTable,$whereCondition,$parameters=null,$limit=null){
        $queryStr=buildQueryString($columns,$fromTable,$whereCondition,$parameters,$limit);
        if(isset(V::$queryCache[$queryStr]))return V::$queryCache[$queryStr]; // Checks if the query result is already cached and returns it if found
        $result=Query($queryStr);
        $rows=[];
        while($row=$result->fetch_array())$rows[]=$row; // Fetches each row from the result and stores it in the query cache
        V::$queryCache[$queryStr]=$rows;
        return $rows;}
    
    /**
	 * This static method executes an UPDATE query.
	 *
	 * It constructs the query string using the buildColumnsValueList function to build the SET part of the query and the buildWherePart function to build the WHERE part of the query.
	 * It then executes the query using the Query function and clears the query cache.
 	 */
    static function queryUpdate($columns,$fromTable,$whereCondition,$parameters){
        $queryStr='UPDATE '.$fromTable.' SET '.buildColumnsValueList($columns).' WHERE '.buildWherePart($whereCondition,$parameters);
        Query($queryStr);
        $queryCache=[];}
    
    /**
	 * This static method executes a DELETE query.
	 *
	 * It constructs the query string by appending the FROM table and the WHERE part using the buildWherePart function.
	 * It then executes the query using the Query function and clears the query cache.
 	 */
	static function queryDelete($fromTable, $whereCondition, $parameters){
    	$queryStr='DELETE FROM '.$fromTable;
    	$queryStr=$queryStr.' WHERE ';
    	$wherePart=buildWherePart($whereCondition, $parameters);
    	$queryStr=$queryStr.$wherePart;
    	Query($queryStr);
    	V::$queryCache=[];}
    
    /**
	 * This static method returns the last inserted ID in the database.
	 *
	 * This method executes an INSERT query.
	 * It constructs the query string by appending the FROM table and the SET part using the buildColumnsValueList function.
	 * It then executes the query using the Query function.
 	 */
    static function queryInsert($columns, $fromTable){// Executes an INSERT query
        $queryStr = 'INSERT '.$fromTable.' SET '.buildColumnsValueList($columns); // Construct the INSERT query string
        Query($queryStr);} // Execute the INSERT query
    
    /**
	 * This static method returns the last inserted ID in the database.
	 * @return int The last inserted ID.
 	 *
 	 * This method returns the last inserted ID in the database.
 	 * It retrieves the insert_id property of the database connection object and returns it.
 	 */
	static function getLastInsertedId(){
    	return V::$conn->insert_id;}
    
    
    /**
     * This static method builds the query string for a SELECT statement
     *
     * @param array|string $columns The columns to select.: This can be either an array of column names and their corresponding alias names, or a string representing the columns to select.
     * @param string $fromTable The table to select from: The table to select from.
     * @param string $whereCondition The WHERE condition for the query: The WHERE condition for the query.
     * @param array|null $parameters The parameters for the WHERE condition.
     * @param int|null $limit The limit for the query: (optional) An array of parameters for the WHERE condition.
     * @return string The built query string: (optional) The limit for the query.
     *
     * The function starts by initializing the query string with the "SELECT" keyword.
     * If the $columns parameter is an array, it iterates through each column and its alias, appending them to the query string.
     * If the column name is numeric, it uses the alias as the column name.
	 * Next, the function appends the "FROM" keyword and the $fromTable parameter to the query string.
	 * It then calls the buildWherePart function to construct the WHERE part of the query string based on the $whereCondition and $parameters parameters.
	 * If a $limit is specified, the function appends it to the WHERE part of the query string.
	 * Finally, the function returns the complete query string.
     */
    static function buildQueryString($columns,$fromTable,$whereCondition,$parameters=null,$limit=null){
    $queryStr='SELECT ';
    if(is_array($columns)){ // Comment: Check if the columns parameter is an array
        $firstColumn=true;
         foreach($columns as $dbName=>$aliasName){ // Comment: Loop through each column and its alias
            if(!$firstColumn)$queryStr=$queryStr.', ';
            else$firstColumn=false;
             if(is_numeric($dbName))$dbName=$aliasName; // Comment: Check if the column name is numeric and use the alias as the column name                
            $queryStr=$queryStr.$dbName.' AS '.$aliasName;}} // Comment: Append the column name and its alias to the query string
    else$queryStr=$queryStr.$columns;
    $queryStr=$queryStr.' FROM '.$fromTable.' WHERE '; // Comment: Append the table name to the query string
    $wherePart=buildWherePart($whereCondition,$parameters); // Comment: Build the WHERE part of the query string
    if(!empty($limit))$wherePart=$wherePart.' LIMIT '.$limit; // Comment: Check if a limit is specified and append it to the WHERE part
    $queryStr=$queryStr.$wherePart; // Comment: Append the WHERE part to the query string
    return$queryStr;} // Comment: Return the final query string

    
    /**
     * This static method builds the column-value list for an INSERT statement.
     *
     * @param array $columns The columns and their values: An array of column names and their corresponding values.
     * @return string The built column-value list.
     *
	 * The method initializes an empty query string and a flag to keep track of the first column. It then iterates over each column and appends it to the query string with its corresponding value.
	 * If the value is not empty, it wraps it in single quotes and escapes any special characters using the real_escape_string() method. If the value is empty, it sets the column value to "DEFAULT".
	 * Finally, it returns the built column-value list.
     */
    static function buildColumnsValueList($columns){
    $queryStr='';
    $firstColumn=true;
    foreach($columns as$dbName=>$value){
        if(!$firstColumn)$queryStr=$queryStr.', '; // Check if it's not the first column: Checks if it's the first column in the loop iteration. If it's not the first column, a comma will be added before appending the next column name and value to the query string.
        else$firstColumn=false;
        if(strlen($value))$columnValue='\''.V::$conn->real_escape_string($value).'\''; // Check if the value has a length: checks if the value of the column has a length. If the value has a length, it will be escaped and enclosed in single quotes. Otherwise, the value will be set to 'DEFAULT'.
        else$columnValue='DEFAULT';
        $queryStr=$queryStr.$dbName.'='.$columnValue;} // Append the column name and value to the query string}: Appends the column name and its corresponding value to the query string.
    return$queryStr;}
    
    /**
     * This static method builds the WHERE part of a query.
     *
     * @param string $whereCondition The WHERE condition: The WHERE condition.
     * @param array $parameters The parameters for the WHERE condition: An array of parameters for the WHERE condition.
     * @return string The built WHERE part.
     *
	 * The method first prepares the parameters by calling the prepareParameters() method.
	 * It then uses the vsprintf() function to format the $whereCondition string with the masked parameters.
	 * Finally, it returns the built WHERE part.
     */
    static function buildWherePart($whereCondition,$parameters){
        $maskedParameters=prepareParameters($parameters); // The function prepareParameters() is called to mask the values in the $parameters array. This is done to prevent SQL injection attacks by ensuring that the values are properly escaped before being used in the query.
        return vsprintf($whereCondition,$maskedParameters);} // The vsprintf() function is then used to format the $whereCondition string with the masked parameters. This function replaces placeholders in the string with the corresponding values from the array.
    
    /**
     * This static method prepares the parameters for a query.
     *
     * @param mixed $parameters The parameters to prepare: The parameters to prepare.
     * @return array The prepared parameters.
     *
     * The method first checks if the $parameters parameter is an array.
     * If not, it converts it into an array.
     * It then iterates over each parameter, trims it, and escapes any special characters using the ESC() method.
	 * Finally, it returns the prepared parameters.
     */
    static function prepareParameters($parameters){
        if(!is_array($parameters))$parameters=[$parameters]; // Check if the input is an array, if not convert it to an array
        $arrayLength = count($parameters); // Get the length of the array
    	for($i = 0; $i < $arrayLength; ++$i){ // Loop through each element of the array
        $parameters[$i] = ESC(trim($parameters[$i]));} // Trim the element and escape any output
        return$parameters;} // Return the modified array
    
    /**
     * This static method executes a database query.
     *
     * @param string $queryStr The query string to execute: The query string to execute.
     * @return mixed The query result.
     * @throws Exception If there is a database query error.
     *
     * The method executes the query using the query() method of the database connection object (V::$conn).
     * If the query execution fails, it throws an exception with the error message obtained from the database connection object.
	 * Finally, it returns the query result.
     */
    static function executeQuery($queryStr){
        $queryResult=V::$conn->query($queryStr); // Execute the database query
        if(!$queryResult)throw new Exception('Database Query Error: '.V::$conn->error); // Check if the query was successful
        return$queryResult;}} // Return the query result
